---
# yamllint disable rule:line-length

- name: Prepare path suffix
  set_fact:
    _nginx_config_suffix: "{{ nginx_site.config_suffix|default('') }}"

- name: Prepare paths
  set_fact:
    _nginx_host_passwd_file: "{{ nginx_htpasswd_dir }}/{{ nginx_site.name }}{{ _nginx_config_suffix }}.htpasswd"
    _nginx_pki_dir: "/etc/pki/acme/{{ nginx_site.name }}"
    _nginx_root: "{{ nginx_site.root|default('/var/www/' + nginx_site.name + _nginx_config_suffix) }}"


- name: Prepare paths
  set_fact:
    _nginx_pki_dir: "/etc/pki/nginx/{{ nginx_site.name }}"
  when: not nginx_site.request_acme_cert|default(True)

- name: Make sure we can restart nginx (reset failed count)
  command: systemctl reset-failed nginx  # noqa 303
  changed_when: false

- name: Create {{ nginx_site.name }} certificate dir
  file:
    dest: '{{ _nginx_pki_dir }}'
    state: directory
    owner: '{{ acme_user }}'
    mode: '{{ nginx_config_dir_permissions }}'

- name: "Create <{{ nginx_site.name }}> config"
  template:
    dest: "{{ nginx_sites_dir }}/{{ nginx_site.name }}{{ _nginx_config_suffix }}.conf"
    src: nginx-static-site.j2
    backup: '{{ nginx_make_config_backup }}'
    mode: '{{ nginx_config_permissions }}'
  register: _nginx_config
  notify: reload nginx

- name: "Create <{{ nginx_site.name }}> root"
  file:
    path: '{{ _nginx_root }}'
    state: directory
    mode: '{{ nginx_config_dir_permissions }}'
  when: nginx_site.request_acme_cert|default(True)

- name: "Create <{{ nginx_site.name }}> index"
  copy:
    dest: '{{ _nginx_root }}/index.html'
    content: 'Hello to {{ nginx_site.name }}'
    mode: 0744
    force: false
  when: nginx_site.request_acme_cert|default(True)

- name: "<{{ nginx_site.name }}>: Create passwords"
  template:
    dest: "{{ _nginx_host_passwd_file }}"
    src: nginx-htpasswd.j2
    mode: '{{ nginx_config_permissions }}'
  when: nginx_site.http_basic_auth is defined

- name: "<{{ nginx_site.name }}>: Check certificate exists"
  stat:
    path: '{{ _nginx_pki_dir }}/fullchain.pem'
  register: need_chainfile
  when: nginx_site.request_acme_cert|default(True)

- name: "<{{ nginx_site.name }}>: Create dummy chainfile"
  shell: |
    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out fullchain.pem -days 42 -nodes -subj '/C=XX/O=Dummy Certificate/CN={{ nginx_site.name }}'
  args:
    chdir: '{{ _nginx_pki_dir }}'
    creates: '{{ _nginx_pki_dir }}/fullchain.pem'
  become_user: '{{ acme_user }}'
  become: true
  when: nginx_site.with_ssl|default(True) and need_chainfile
  register: need_chainfile

- name: "<{{ nginx_site.name }}>: Make sure nginx can read temporary certificates"
  file:  # noqa 503
    path: '{{ _nginx_pki_dir }}/{{ item }}'
    state: file
    owner: '{{ acme_user }}'
    group: '{{ nginx_group }}'
    mode: '640'
  with_items:
    - fullchain.pem
    - key.pem
  when: need_chainfile.changed

- name: "<{{ nginx_site.name }}>: Restart nginx with added config"
  service:  # noqa 503
    name: nginx
    state: restarted
  when: need_chainfile is changed or _nginx_config is changed

- name: "<{{ nginx_site.name }}>: Delete test certs"
  file:  # noqa 503
    path: '{{ _nginx_pki_dir }}/{{ item }}'
    state: absent
  with_items:
    - fullchain.pem
    - cert.pem
    - key.pem
  when: need_chainfile is changed and nginx_site.request_acme_cert|default(True)

- name: "<{{ nginx_site.name }}>: Generate LE certificate"
  shell: >
      "{{ acme_home_dir }}/acme.sh"
      --issue -d "{{ nginx_site.name }}"
      --standalone --httpport {{ nginx_acmesh_port }}
  args:
    chdir: '{{ _nginx_pki_dir }}'
    creates: '{{ acme_data_dir }}/{{ nginx_site.name }}/fullchain.cer'
  become_user: '{{ acme_user }}'
  become: true
  notify: reload nginx
  when: nginx_site.request_acme_cert|default(True) and nginx_site.with_ssl|default(True) and need_chainfile

- meta: flush_handlers

- name: "<{{ nginx_site.name }}>: Install LE certificate"
  shell: >
      "{{ acme_home_dir }}/acme.sh" --installcert -d "{{ nginx_site.name }}"
      --certpath "{{ _nginx_pki_dir }}/cert.pem"
      --keypath  "{{ _nginx_pki_dir }}/key.pem"
      --capath  "{{ _nginx_pki_dir }}/ca.pem"
      --fullchainpath "{{ _nginx_pki_dir }}/fullchain.pem"
      --reloadcmd "sudo systemctl reload nginx"
  args:
    chdir: '{{ _nginx_pki_dir }}'
    creates: '{{ _nginx_pki_dir }}/fullchain.pem'
  become_user: '{{ acme_user }}'
  become: true
  notify: restart nginx
  when: nginx_site.request_acme_cert|default(True) and (nginx_site.with_ssl|default(True))


- meta: flush_handlers
  when: not nginx_less_restarts|default(False)
